@model OrderViewModel
@using Project.Enums
@{
	ViewData["Title"] = "Преглед и плащане";
	OrderState[] removeAllowedStates = new OrderState[] {
		OrderState.Created,
		OrderState.Expired,
	};
	OrderState[] saveAllowedStates = new OrderState[] {
		OrderState.Created,
	};
	double amount = Model.OriginalPrice;
	foreach (PromoCodeViewModel code in Model.PromoCodes) {
		switch (code.Type) {
			case PromoCodeType.FixedAmount:
				amount -= code.Value;
				break;
			case PromoCodeType.Percentage:
				amount -= amount * code.Value;
				break;
			case PromoCodeType.PriceOverride:
				amount = code.Value;
				break;
			case PromoCodeType.Free:
				amount = 0;
				break;
		}
	}
	if (amount < 0)
		amount = 0;
	ViewData["Discount"] = Model.OriginalPrice - amount;
}

<style>
	input[type="number"] {
		text-align: center;
	}
</style>
<div id="order" class="row">
	<div class="col-12 col-md-8">
		<div class="card">
			<div class="card-header">
				<a class="btn btn-outline-info" href="/Admin/Orders"><i class="fas fa-chevron-left"></i> Назад</a>
				<h5 class="card-title">Продукти</h5>
				<h6 class="card-subtitle text-muted">Настройки и опции на Вашата поръчка</h6>
			</div>
			<div class="card-body">
				<table class="table table-striped">
					<thead>
						<tr>
							<th>Име на продукт</th>
							<th>Количество</th>
							<th>Сървърна локация</th>
							<th>Единична цена</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>@Model.Plan.Name</td>
							<td>
								{{amount}}
							</td>
							<td>
								{{location.replace("_", ", ")}}
							</td>
							<td>{{price.toFixed(2)}}лв</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="col-12 col-md-4">
		<div class="card">
			<div class="card-header">
				<h4>Общ преглед на поръчката</h4>
			</div>
			<div class="card-body">
				<div class="col-12">
					<div class="row">
						<table class="table table-striped">
							<thead>
								<tr>
									<th>Междинна сума: </th>
									<th>Отстъпка: <code>{{codes.join(", ")}}</code></th>
									<th>Обща сума: </th>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>{{midPrice.toFixed(2)}}лв</td>
									<td>{{discount.toFixed(2)}}лв</td>
									<td>{{finalPrice.toFixed(2)}}лв</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@if (Model.Payment != null) {
	<div class="row">
		<div class="col-12">
			<div class="card">
				<div class="card-body">
					<h3 class="card-title">Плащане</h3>
					<table class="table table-striped">
						<thead>
							<tr>
								<th>Дата</th>
								<th>PayPal номер на плащане</th>
								<th>PayPal номер на платец</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>@Model.Payment.Time</td>
								<td>@Model.Payment.PayPalPayment</td>
								<td>@Model.Payment.PayPalPayer</td>
							</tr>
						</tbody>
					</table>
					<hr>
					<table class="table table-striped">
						<thead>
							<tr>
								<th>Създадени сървъри</th>
							</tr>
						</thead>
						<tbody>
							@foreach (VPSViewModel vps in @Model.Payment.AssociatedVPSs) {
								<tr>
									<td>
										<a href="/Admin/VPS?Id=@vps.Id">@vps.Name</a>
									</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
}
<script src="/js/order/price.js"></script>
<script>
	order.id = "@Model.Id";
	order.amount = @Model.Amount;
	order.midPrice = @Model.OriginalPrice;
	order.price = order.Having(order.amount, order.midPrice).Get.PriceFor(1);
	order.discount = @ViewData["Discount"];
	order.finalPrice = @Model.FinalPrice;
	order.location = "@Model.Location";
	order.codes = [ "@string.Join("\", \"", Model.PromoCodes.Select(code => code.Code))" ];
	order.update(-1);
</script>